/*
 * Copyright (C) 2014 Converge Consulting Limited
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.getconverge.converge.entities.security;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.ManyToMany;
import javax.persistence.Table;

/**
 * Permission granted to a specific {@link UserAccount} or {@link UserRole}.
 *
 * @author Allan Lykke Christensen
 */
@Entity
@Table(name = "permission")
public class Permission implements Serializable {

    @Id
    @GeneratedValue
    @Column(name = "id")
    private Long id;

    @Column(name = "permission", nullable = false)
    private String permission;

    @ManyToMany(mappedBy = "permissions")
    private List<UserRole> userRoles = new ArrayList<>();

    /**
     * Creates a new instance of {@link Permission}.
     */
    public Permission() {
        this("");
    }

    /**
     * Creates a new instance of {@link Permission}.
     *
     * @param permission Permission string representing the thing that is
     * authorized to access
     */
    public Permission(String permission) {
        this.permission = permission;
    }

    /**
     * Gets the unique identifier of the {@link Permission} generated by the
     * database.
     *
     * @return Unique identifier of the {@link Permission}
     */
    public Long getId() {
        return id;
    }

    /**
     * Sets the unique identifier of the {@link Permission}. The database grants
     * the unique identifier so avoid using this setter.
     *
     * @param id Unique identifier of the {@link Permission}
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Gets the permission string representing what the {@link UserAccount} or
     * {@link UserRole} is authorized to access.
     *
     * @return Permission string representing what the security subject is
     * authorized to access
     */
    public String getPermission() {
        return permission;
    }

    /**
     * Sets the permission string representing what the {@link UserAccount} or
     * {@link UserRole} is authorized to access.
     *
     * @param permission Permission string representing what the security
     * subject is authorized to access
     */
    public void setPermission(String permission) {
        this.permission = permission;
    }

    /**
     * Gets a {@link List} of the {@link UserRole}s granted the
     * {@link Permission}.
     *
     * @return {@link List} of the {@link UserRole}s granted the
     * {@link Permission}.
     */
    public List<UserRole> getUserRoles() {
        return userRoles;
    }

    /**
     * A {@link Permission} ({@code a}) is equal to another object ({@code b})
     * only if {@code b} is a {@link Permission} and
     * {@code a.getId().equals(b.getId())}.
     *
     * @param object Object to determine if this object is equal
     * @return {@code true} if this {@link Permission} is equal to the given
     * object, otherwise {@code false}
     */
    @Override
    public boolean equals(Object object) {
        if (!(object instanceof Permission)) {
            return false;
        }
        Permission other = (Permission) object;
        return (this.id != null || other.id == null) && (this.id == null || this.id.equals(other.id));
    }

    /**
     * {@inheritDoc }
     */
    @Override
    public int hashCode() {
        int hash = 0;
        hash += (id != null ? id.hashCode() : 0);
        return hash;
    }

    /**
     * {@inheritDoc }
     */
    @Override
    public String toString() {
        return getClass().getName() + "[id=" + id + "]";
    }
}
